Liste des taches effectuées :

*Affichage(all, byId)
Afficher liste des entreprises (visible par l'admin et le pilote)
Afficher profil entreprise (visible par l'entreprise, le pilote, l'étudiant (optionel pour l'admin))
Afficher liste des pilotes 
Afficher liste metiers 
Afficher liste des offre (par entreprise)
Afficher profile d'une offre

*Create (add)
Création entreprise 
Création offre (by id entreprise)
Création metier 
Création compte pilote (compte pilote(user))
Création compte étudiant (l'étudiant se crée un compte (sign up))

*Modifier (edit)
Edit offre
Edit entreprise
Edit metier
Edit pilote (en cours)

*Login (sign in)

************résumé : CRU pour toutes les gestions************
To do : 
Delete by id pour toutes les gestions
Image uploading pour les formulaires (logo entreprise, image metier)
Recherche + Recherche avec filtres 
Création d'un compte user entreprise (en utilisant la table entrepold avec vérification de la Raison_social)
Fonction hash password pour toutes les personnes qui vont s'authentifier (bcrypt)
Gestion des messages d'erreur : erreur d'authentification, meme username, utilisateur ayant déja crée un compte
Gestion des roles et permission : different redirect pour chaque role
Pagination pour tous les affichages 
Gestion de la wishlist : ajouter, supprimer et postuler à une offre
Gestion du déroulement de stage : etat =>{
    Génération dynamique de la demande de stage (en pdf) : etat = en attente 
    Possibilité pour l'entreprise d'accepter ou decliner l'offre
    Affichage des étudiants ayant déja postulé à une offre (pour l'entreprise)
    En cas d'acceptation, génération de la convention de stage (en pdf) : etat = accepté
}
//si le temps reste 
Gestion du déroulement de l'apres stage => {
    systeme de notation (etudiant-entreprise, entreprise-etudiant)
    affichage statistique etudiants ayant déja passé un stage dans cette entreprise
}
Gestion des diplomés ? <3






    console.log(1)
    const Nom = req.body.Nom
    const Prenom = req.body.Prenom
    const Email = req.body.Email
    const Username = req.body.Username
    const Password = req.body.Password
    const Role = req.body.Role
    const Id_utilisateur = req.params.id
    let pilote = new User()
    pilote.Nom = Nom
    pilote.Prenom = Prenom
    pilote.Email = Email
    pilote.Username = Username
    pilote.Password = Password
    pilote.Role = Role
    pilote.Id_utilisateur = Id_utilisateur
    console.log(2)
    pilote.updatepilote(req.params.id).then(() => {
        console.log(3)
        User.getPiloteById(req.params.id).then((pilotes) => {
            console.log(req.params.id)
            return res.render('pilotes/edit', { pilotes: pilotes[0] })
        })
    })





  updatepilote = (Id_utilisateur) => {
    console.log(4)
    return new Promise((resolve, reject) => {
      this.dbconnection.query(`UPDATE ${this.tablename} SET Nom = ?, Prenom = ?, Email = ?, Username = ?, Password = ?, Role = ? WHERE Id_utilisateur =${Id_utilisateur}`, [this.Nom, this.Prenom, this.Email, this.Username, this.Password, this.Role], (error, results, fields) => {
        if (error) return reject(error)
        resolve(results)
        console.log(5)
      })
    })
  }



